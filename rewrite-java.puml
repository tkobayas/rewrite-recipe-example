@startuml
'https://plantuml.com/class-diagram

interface Tree {
    getId()
    getMarkers()
    accept(TreeVisitor<R, P> v, P p)
    isAcceptable(TreeVisitor<?, P> v, P p)
    printer(Cursor cursor)
    print(Cursor cursor)
}

interface SourceFile extends Tree {
    getSourcePath()
    printAll()
}

interface JavaSourceFile extends SourceFile

class CompilationUnit implements JavaSourceFile {
    acceptJava(JavaVisitor<P> v, P p)
}


interface Parser {
     parseInputs(Iterable<Input> sources, Path relativeTo, ExecutionContext ctx)
}

interface JavaParser extends Parser

class ReloadableJava17Parser implements JavaParser

class ReloadableJava17ParserVisitor extends TreePathScanner

ReloadableJava17Parser-->ReloadableJava17ParserVisitor

ReloadableJava17ParserVisitor-->CompilationUnit : produces

abstract class TreeVisitor<T extends Tree, P> {
    isAcceptable(SourceFile sourceFile, P p)
    isAdaptableTo(Class<? extends TreeVisitor> adaptTo)
    visit(Tree tree, P p, Cursor parent)
    visit(Tree tree, P p) : Tree
}

TreeVisitor-->Tree : visit

class JavaVisitor<P> extends TreeVisitor {
    visitCompilationUnit(J.CompilationUnit cu, P p)
}

class JavaIsoVisitor<P> extends JavaVisitor {
}

abstract class Recipe {
    getVisitor() : TreeVisitor
}

Recipe-->TreeVisitor : produces

class RewriteTestClassesShouldNotBePublic extends Recipe

RewriteTestClassesShouldNotBePublic-->JavaIsoVisitor : produces

@enduml